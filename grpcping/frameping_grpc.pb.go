// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpcping/frameping.proto

package grpcping

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FramePing_SayPing_FullMethodName = "/grpcping.FramePing/SayPing"
)

// FramePingClient is the client API for FramePing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FramePingClient interface {
	// Sends a ping
	SayPing(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type framePingClient struct {
	cc grpc.ClientConnInterface
}

func NewFramePingClient(cc grpc.ClientConnInterface) FramePingClient {
	return &framePingClient{cc}
}

func (c *framePingClient) SayPing(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, FramePing_SayPing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FramePingServer is the server API for FramePing service.
// All implementations must embed UnimplementedFramePingServer
// for forward compatibility
type FramePingServer interface {
	// Sends a ping
	SayPing(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedFramePingServer()
}

// UnimplementedFramePingServer must be embedded to have forward compatible implementations.
type UnimplementedFramePingServer struct {
}

func (UnimplementedFramePingServer) SayPing(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayPing not implemented")
}
func (UnimplementedFramePingServer) mustEmbedUnimplementedFramePingServer() {}

// UnsafeFramePingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FramePingServer will
// result in compilation errors.
type UnsafeFramePingServer interface {
	mustEmbedUnimplementedFramePingServer()
}

func RegisterFramePingServer(s grpc.ServiceRegistrar, srv FramePingServer) {
	s.RegisterService(&FramePing_ServiceDesc, srv)
}

func _FramePing_SayPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramePingServer).SayPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FramePing_SayPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramePingServer).SayPing(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FramePing_ServiceDesc is the grpc.ServiceDesc for FramePing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FramePing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcping.FramePing",
	HandlerType: (*FramePingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayPing",
			Handler:    _FramePing_SayPing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcping/frameping.proto",
}
